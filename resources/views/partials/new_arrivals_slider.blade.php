{{-- resources/views/partials/new_arrivals_slider.blade.php --}}

<section class="container mx-auto  py-8 mt-10">
    <h2 class="text-3xl text-gray-800 mb-6 text-center">New Arrivals</h2>

    <div class="relative overflow-hidden w-full max-w-full mx-auto">
        <div id="new-arrivals-slider-wrapper" class="flex transition-transform duration-500 ease-in-out">


            @foreach ($allProducts as $product)
                {{-- Reuse the product_card partial for consistent styling --}}
                <div class="new-arrival-item flex-shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5 p-2">
                    @include('partials.product_card', ['product' => $product])
                </div>
            @endforeach
        </div>

        {{-- Navigation Buttons --}}
        <button id="new-arrivals-prev-btn" class="slider-nav-button left">
            &#10094;
        </button>
        <button id="new-arrivals-next-btn" class="slider-nav-button right">
            &#10095;
        </button>

        {{-- Dots Indicator --}}
        <div id="new-arrivals-dots" class="flex justify-center mt-4 space-x-2">
            {{-- Dots will be generated by JS --}}
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const sliderWrapper = document.getElementById('new-arrivals-slider-wrapper');
        const prevBtn = document.getElementById('new-arrivals-prev-btn');
        const nextBtn = document.getElementById('new-arrivals-next-btn');
        const dotsContainer = document.getElementById('new-arrivals-dots');
        const newArrivalItems = document.querySelectorAll('.new-arrival-item');

        let currentIndex = 0;
        let itemsPerView = 0; // Will be calculated dynamically
        let totalItems = newArrivalItems.length;

        let touchStartX = 0;
        let touchEndX = 0;
        const swipeThreshold = 50;

        function updateItemsPerView() {
            if (window.innerWidth >= 1280) { // xl
                itemsPerView = 5; // 5 items visible on extra large screens
            } else if (window.innerWidth >= 1024) { // lg
                itemsPerView = 4; // 4 items visible on large screens
            } else if (window.innerWidth >= 768) { // md
                itemsPerView = 3; // 3 items visible on medium screens
            } else if (window.innerWidth >= 640) { // sm
                itemsPerView = 2; // 2 items visible on small screens
            } else { // default for extra small screens
                itemsPerView = 1; // 1 item visible on very small screens
            }
        }

        function updateSliderPosition() {
            updateItemsPerView(); // Recalculate items per view on resize/slide
            const itemWidth = newArrivalItems[0] ? newArrivalItems[0].offsetWidth : 0;
            const translateXValue = -currentIndex * itemWidth;
            sliderWrapper.style.transform = `translateX(${translateXValue}px)`;
            updateDots();
        }

        function nextSlide() {
            if (currentIndex < totalItems - itemsPerView) {
                currentIndex++;
            } else {
                currentIndex = 0; // Loop back to start
            }
            updateSliderPosition();
        }

        function prevSlide() {
            if (currentIndex > 0) {
                currentIndex--;
            } else {
                currentIndex = totalItems - itemsPerView; // Loop to end
            }
            updateSliderPosition();
        }

        function currentSlide(index) {
            currentIndex = index;
            updateSliderPosition();
        }

        function updateDots() {
            dotsContainer.innerHTML = ''; // Clear existing dots
            const numDots = Math.ceil(totalItems / itemsPerView);
            for (let i = 0; i < numDots; i++) {
                const dot = document.createElement('span');
                dot.classList.add('dot', 'w-2', 'h-2', 'bg-gray-400', 'rounded-full', 'cursor-pointer', 'transition-colors', 'duration-300');
                if (Math.floor(currentIndex / itemsPerView) === i) {
                    dot.classList.add('bg-primary-500'); // Active dot color
                }
                dot.onclick = () => currentSlide(i * itemsPerView);
                dotsContainer.appendChild(dot);
            }
        }

        // Event Listeners
        prevBtn.addEventListener('click', prevSlide);
        nextBtn.addEventListener('click', nextSlide);

        // Touch swipe for slider
        sliderWrapper.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            sliderWrapper.style.transition = 'none'; // Disable transition during swipe
        });

        sliderWrapper.addEventListener('touchmove', (e) => {
            touchEndX = e.touches[0].clientX;
            const diff = touchEndX - touchStartX;
            const currentTransform = -currentIndex * (newArrivalItems[0] ? newArrivalItems[0].offsetWidth : 0);
            sliderWrapper.style.transform = `translateX(${currentTransform + diff}px)`;
        });

        sliderWrapper.addEventListener('touchend', () => {
            sliderWrapper.style.transition = 'transform 0.5s ease-in-out'; // Re-enable transition
            const swipeDistance = touchStartX - touchEndX;

            if (swipeDistance > swipeThreshold) {
                nextSlide();
            } else if (swipeDistance < -swipeThreshold) {
                prevSlide();
            } else {
                // If not a significant swipe, snap back to current slide
                updateSliderPosition();
            }
        });

        // Handle window resize to adjust items per view and slider position
        window.addEventListener('resize', updateSliderPosition);

        // Initial setup
        updateSliderPosition();
    });
</script>
