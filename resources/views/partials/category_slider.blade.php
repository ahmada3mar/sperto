{{-- resources/views/partials/category_slider.blade.php --}}

<section class="container mx-auto px-4 py-8">
    <div class="relative overflow-hidden w-full max-w-6xl mx-auto">
        <div id="category-slider-wrapper" class="flex transition-transform duration-500 ease-in-out">
            @php
                // Dummy Category Data for demonstration
                $categories = [
                    ['id' => 1, 'name' => 'Surface Cleaners', 'image' => 'https://www.simplyrecipes.com/thmb/abGZm1UEpZZ47vIlTRxpOfrL4aY=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/Simply-Recipes-2-Ingredient-Cleaning-LEAD-02-678c93e1fbed4ae19fad2b340d613e25.jpg'],

                    ['id' => 2, 'name' => 'Kitchen Cleaning Products', 'image' => 'https://t4.ftcdn.net/jpg/12/63/75/81/360_F_1263758193_hp8osUK9R3JOiocCUaHCPUdyT088kchb.jpg'],

                    ['id' => 3, 'name' => 'Bathroom Cleaners', 'image' => 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRgREnqCeTqfBBC1itMM4coCeu9DXKWAu9mdg&s'],


                    ['id' => 4, 'name' => 'Floor Care', 'image' => 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTdJbog8LUjP6N-AcKUqDeuQIYOmiFGkt5WNg&s'],


                    ['id' => 5, 'name' => 'Glass & Window Cleaners', 'image' => 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQpIiyXSHay_KH3lEDwAn_WCIafifCBPkUFVMIJNl1-5OVpWSq2XpfCpsiU7zYRiO7bRHY&usqp=CAU'],


                    ['id' => 6, 'name' => 'Disinfectants & Sanitizers', 'image' => 'https://images.unsplash.com/photo-1604085437107-b3531b4028b4?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NzM4OTJ8MHwxfHNlYXJjaHwxfHxoYW5kJTIwc2FuaXRpemVyfGVufDB8MHx8fDE3MDA0NTc3NTZ8MA&ixlib=rb-4.0.3&q=80&w=400'],
                    ['id' => 7, 'name' => 'Laundry Care', 'image' => 'https://images.unsplash.com/photo-1626800046904-4d8b671a5f57?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NzM4OTJ8MHwxfHNlYXJjaHwxfHxsYXVuZHJ5JTIwZGV0ZXJnZW50fGVufDB8MHx8fDE3MDA0NTc3ODJ8MA&ixlib=rb-4.0.3&q=80&w=400'],
                    ['id' => 8, 'name' => 'Air Fresheners & Deodorizers', 'image' => 'https://images.unsplash.com/photo-1596700877960-b6a957262078?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NzM4OTJ8MHwxfHNlYXJjaHwxfHxhcnJvd2luZCUyMGFpciUyMGZyZXNoZW5lcnxlbnwwfDB8fHwxNzAwNDU3ODEwfDA&ixlib=rb-4.0.3&q=80&w=400'],
                    ['id' => 9, 'name' => 'Cleaning Tools & Accessories', 'image' => 'https://images.unsplash.com/photo-1581518428807-68b320d912b7?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NzM4OTJ8MHwxfHNlYXJjaHwxfHxjYm94JTIwY2xlYW5pbmclMjB0b29sc3xlbnwwfDB8fHwxNzAwNDU3ODQwfDA&ixlib=rb-4.0.3&q=80&w=400'],
                    ['id' => 10, 'name' => 'Eco-Friendly Products', 'image' => 'https://images.unsplash.com/photo-1593113616828-b0a631e80e22?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NzM4OTJ8MHwxfHNlYXJjaHwxfHxlY28tZnJpZW5kbHklMjBjbGVhbmluZyUyMHByb2R1Y3RzfGVufDB8MHx8fDE3MDA0NTc4NjV8MA&ixlib=rb-4.0.3&q=80&w=400'],
                ];
            @endphp

            @foreach ($categories as $category)
                <div class="category-item flex-shrink-0 w-1/3 sm:w-1/4 md:w-1/5 lg:w-1/6 xl:w-1/7 p-2 flex flex-col items-center text-center">
                    <a href="#" class="block w-24 h-24 rounded-full overflow-hidden  hover:border-primary-700 transition-all-ease">
                        <img src="{{ $category['image'] }}" alt="{{ $category['name'] }}" class="w-full h-full object-cover">
                    </a>
                    <p class="mt-2 text-sm  text-gray-700">{{ $category['name'] }}</p>
                </div>
            @endforeach
        </div>

        {{-- Navigation Buttons --}}
        <button id="category-prev-btn" class="cursor-pointer text-md absolute top-1/2 -translate-y-10 left-0 text-gray-800 bg-opacity-50  p-2 rounded-full  hover:bg-opacity-75 transition-all-ease hidden md:block">
            &#10094;
        </button>
        <button id="category-next-btn" class="cursor-pointer text-md absolute top-1/2 -translate-y-10 right-0 text-gray-800 bg-opacity-50  p-2 rounded-full  hover:bg-opacity-75 transition-all-ease hidden md:block">
            &#10095;
        </button>

        {{-- Dots Indicator (optional for category slider, but good for long lists) --}}
        <div id="category-dots" class="flex justify-center mt-4 space-x-2">
            {{-- Dots will be generated by JS --}}
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const sliderWrapper = document.getElementById('category-slider-wrapper');
        const prevBtn = document.getElementById('category-prev-btn');
        const nextBtn = document.getElementById('category-next-btn');
        const dotsContainer = document.getElementById('category-dots');
        const categoryItems = document.querySelectorAll('.category-item');

        let currentIndex = 0;
        let itemsPerView = 0; // Will be calculated dynamically
        let totalItems = categoryItems.length;

        let touchStartX = 0;
        let touchEndX = 0;
        const swipeThreshold = 50;

        function updateItemsPerView() {
            if (window.innerWidth >= 1280) { // xl
                itemsPerView = 6;
            } else if (window.innerWidth >= 1024) { // lg
                itemsPerView = 5;
            } else if (window.innerWidth >= 768) { // md
                itemsPerView = 4;
            } else if (window.innerWidth >= 640) { // sm
                itemsPerView = 3;
            } else { // default for smaller screens
                itemsPerView = 2;
            }
        }

        function updateSliderPosition() {
            updateItemsPerView(); // Recalculate items per view on resize/slide
            const itemWidth = categoryItems[0] ? categoryItems[0].offsetWidth : 0;
            const translateXValue = -currentIndex * itemWidth;
            sliderWrapper.style.transform = `translateX(${translateXValue}px)`;
            updateDots();
        }

        function nextSlide() {
            if (currentIndex < totalItems - itemsPerView) {
                currentIndex++;
            } else {
                currentIndex = 0; // Loop back to start
            }
            updateSliderPosition();
        }

        function prevSlide() {
            if (currentIndex > 0) {
                currentIndex--;
            } else {
                currentIndex = totalItems - itemsPerView; // Loop to end
            }
            updateSliderPosition();
        }

        function currentSlide(index) {
            currentIndex = index;
            updateSliderPosition();
        }

        function updateDots() {
            dotsContainer.innerHTML = ''; // Clear existing dots
            const numDots = Math.ceil(totalItems / itemsPerView);
            for (let i = 0; i < numDots; i++) {
                const dot = document.createElement('span');
                dot.classList.add('dot', 'w-2', 'h-2', 'bg-gray-400', 'rounded-full', 'cursor-pointer', 'transition-colors', 'duration-300');
                if (Math.floor(currentIndex / itemsPerView) === i) {
                    dot.classList.add('bg-primary-500'); // Active dot color
                }
                dot.onclick = () => currentSlide(i * itemsPerView);
                dotsContainer.appendChild(dot);
            }
        }

        // Event Listeners
        prevBtn.addEventListener('click', prevSlide);
        nextBtn.addEventListener('click', nextSlide);

        // Touch swipe for slider
        sliderWrapper.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            sliderWrapper.style.transition = 'none'; // Disable transition during swipe
        });

        sliderWrapper.addEventListener('touchmove', (e) => {
            touchEndX = e.touches[0].clientX;
            const diff = touchEndX - touchStartX;
            const currentTransform = -currentIndex * (categoryItems[0] ? categoryItems[0].offsetWidth : 0);
            sliderWrapper.style.transform = `translateX(${currentTransform + diff}px)`;
        });

        sliderWrapper.addEventListener('touchend', () => {
            sliderWrapper.style.transition = 'transform 0.5s ease-in-out'; // Re-enable transition
            const swipeDistance = touchStartX - touchEndX;

            if (swipeDistance > swipeThreshold) {
                nextSlide();
            } else if (swipeDistance < -swipeThreshold) {
                prevSlide();
            } else {
                // If not a significant swipe, snap back to current slide
                updateSliderPosition();
            }
        });

        // Handle window resize to adjust items per view and slider position
        window.addEventListener('resize', updateSliderPosition);

        // Initial setup
        updateSliderPosition();
    });
</script>
